#!/usr/bin/perl
use strict;
use warnings;

# a poor man's database
use DB_File;
my %puzzle;
tie %puzzle, 'DB_File', 'nyt_puzzles.dbm';

use CGI qw/
    :standard
/;
my $q = CGI->new();
print $q->header();
my $cgi = 'http://logicalpoetry.com/cgi-bin';

my $date = $q->param('date');
my %is_found = map { $_ => 1 }
               split ' ', $q->param('found');

my $puzzle = $puzzle{$date};
$puzzle =~ s{\A [^|]* [|]\ s* }{}xms;
my @words = $puzzle =~ m{([a-z]+)}xmsg;
my $show_date = date($date)->format("%B %e, %Y");

use Date::Simple qw/
    date
/;
use Bee_DBH qw/
    $dbh
    get_person
/;

my ($ip_id, $person_id, $name, $location) = get_person();
my %clue_for;
my $got_clues = 0;

if ($person_id) {
    # we've seen this person before
    # they have either made a puzzle or added clues
    # for some date (maybe not the current one).
    #
    # see there are existing clues for this date
    # from this person
    #
    my $sth_clue = $dbh->prepare(<<'EOS');

        SELECT word, clue
          FROM bee_clue
         WHERE person_id = ?
           AND date = ?

EOS
    $sth_clue->execute($person_id, $date);
    while (my ($word, $clue) = $sth_clue->fetchrow_array()) {
        $clue_for{$word} = $clue;
        $got_clues = 1;
    }
}

if (! $got_clues) {
    # first time adding clues for this date
    # see if we have any clues from this person
    # for another date that has the same words.
    #
    my $quoted_words = join ', ',
                       map {
                           "'$_'"
                       }
                       @words;
    my $sth_clue = $dbh->prepare(<<"EOS");

        SELECT word, clue
          FROM bee_clue
         WHERE person_id = ?
           AND word in ($quoted_words)

EOS
    $sth_clue->execute($person_id);
    while (my ($word, $clue) = $sth_clue->fetchrow_array()) {
        $clue_for{$word} = $clue;
    }
}
# otherwise ... when someone is updating their clues
# for a given date we don't look for clues from another date.
# we DID when they first added clues for the given date.
# at that point in time they may have decided not to use
# a clue from another date.

print <<"EOH";
<html>
<head>
<link rel='stylesheet' type='text/css' href='/nytbee/cgi_style.css'/>
<script>
var newwin;
function popup_define(word, height, width) {
    newwin = window.open(
        "$cgi/nytbee_define/" + word, 'define',
        'height=' + height + ',width=' + width +', scrollbars'
    );
    newwin.moveTo(800, 0);
    var el = document.getElementById(word + '_clue').focus();
}
</script>
</head>
<body>
<h2>Clues for the NYT Puzzle<br>on $show_date</h2>
<form name=form action=nytbee_mkclues2>
<input type=hidden name=date value='$date'>
<p>
No need to give clues for all of the words.
Clicking on the words will give a dictionary definition.
You may wish to give clues that are more like crossword clues.

<p>
<table cellpadding=3>
<tr><td>Your Name</td><td><input name=name size=30 value='$name'></td></tr>
<tr><td>Your Location</td><td><input name=location size=30 value='$location'></td></tr>
<tr><td colspan=2>&nbsp;</td></tr>
EOH
for my $w (@words) {
    my $uw = ucfirst $w;
    my $word_td; 
    if ($is_found{$w}) {
        $word_td =td(qq!<a href="javascript:popup_define('$w',300,500)">$uw</a>!),
    }
    else {
        $word_td = td({ class => 'word_td'}, '&nbsp;');
    }
    print Tr($word_td,
             td("<input type=text size=30 name=${w}_clue id=${w}_clue"
              . qq! value="! . ($clue_for{$w}||'') . qq!">!)
          ), "\n";
}
print Tr(td('&nbsp'), td({ style => 'text-align: left;' }, "<button type=submit>Submit</button>")), "\n";
print <<"EOH";
</table>
</body>
</html>
<script>document.form.name.focus()</script>
EOH
