#!/usr/bin/perl
use strict;
use warnings;
use CGI;
my $q = CGI->new();
print $q->header();

use CGI::Carp qw/
    warningsToBrowser
    fatalsToBrowser
/;

use BeeUtil qw/
    uniq_chars
    error
    table
    Tr
    td
/;
use Bee_DBH qw/
    $dbh
    get_person
/;

my ($ip_id, $person_id, $name, $location) = get_person();
# note that $person_id may be undef
# we create the bee_person record only when ...

my $seven = $q->param('seven');
my $center = $q->param('center');
my @other_words = split ' ', $q->param('other_words');
my $regex = qr{[^$seven]}xms;

# do these extra words 'qualify'?
my @not_okay;
for my $w (@other_words) {
    if (length $w < 4
        || $w =~ $regex
        || index($w, $center) < 0
    ) {
        push @not_okay, $w;
    }
}
if (@not_okay) {
    error "These words do not qualify:<ul>"
        . join('', map { "$_<br>\n" } @not_okay)
        . "</ul>\n";
}
my @ok_words = sort $q->param('ok'), @other_words;
# is there at least one pangram?
my @pangrams;
for my $w (@ok_words) {
    if (uniq_chars($w) == 7) {
        push @pangrams, $w;
    }
}
if (! @pangrams) {
    error "In the many words there is no pangram! :(";
}

# did the person give a clue for any of the @ok_words before?
# offer them..
# there may be more than one - in this case have a way
# to cycle through the clues - in date order.
# with community puzzles coming first.
# dup code with nytbee_clues???
# can we reuse?
#
my %prior_clues_for;
my $got_clues = 0;
if ($person_id) {
    my $words = join ', ',
                map {
                    "'$_'"
                }
                @ok_words;
    my $sth_clue = $dbh->prepare(<<"EOS");

        SELECT distinct word, clue
          FROM bee_clue
         WHERE person_id = $person_id
           AND word IN ($words)
      ORDER BY date desc;

EOS
    $sth_clue->execute();
    while (my ($word, $clue) = $sth_clue->fetchrow_array()) {
        $got_clues = 1;
        if (exists $prior_clues_for{$word}) {
            if (ref $prior_clues_for{$word} eq 'ARRAY') {
                push @{$prior_clues_for{$word}}, $clue;
            }
            else {
                my $clue1 = $prior_clues_for{$word};
                $prior_clues_for{$word} = [ $clue1, $clue ];
            }
        }
        else {
            $prior_clues_for{$word} = $clue;
        }
    }
}

# for the words that have multiple prior clues
# we craft a JSON string.
my %clues_for_json;
for my $w (@ok_words) {
    if (ref $prior_clues_for{$w} eq 'ARRAY') {
        $clues_for_json{$w} = {
            clues => $prior_clues_for{$w},
            cur   => 0,
        };
    }
}
use JSON::PP qw/
    encode_json
/;
my $json = encode_json(\%clues_for_json);

my $prior_clues = $got_clues? "<p>You have given clues for some of the words before.": '';
if (%clues_for_json) {
    $prior_clues .= " If there is more than one clue for a word you can cycle through them by clicking the <img height=25 src=/nytbee/cycle.jpg> icon.<p>";
}

my $cgi = 'http://logicalpoetry.com/cgi-bin';

print <<"EOH";
<html>
<head>
<link rel='stylesheet' type='text/css' href='http://logicalpoetry.com/nytbee/cgi_style.css'/>
<script>
var newwin;
function popup(url, height, width) {
    newwin = window.open(
        url, 'define',
        'height=' + height + ',width=' + width +', scrollbars'
    );
    newwin.moveTo(800, 0);
}
var clues_for = $json;
function cycle(w) {
    clues_for[w].cur = (clues_for[w].cur + 1) % clues_for[w].clues.length;
    document.getElementById(w + '_clue').value
        = clues_for[w].clues[ clues_for[w].cur ];
}
</script>
</head>
<body>
<h1>Making an NYT Type<br>Spelling Bee Puzzle<br>Step <span class=red>4</span></h1>
Optionally, provide clues for each word.
$prior_clues
You can click on the words to get a dictionary definition.
You may, instead, wish to give clues that are ambiguous, clever, wordplay &#128522; - like clues for a crossword.
<p>
<form name=form action=/cgi-bin/get_clues method=POST>
<input type=hidden name=seven value='$seven'>
<input type=hidden name=center value='$center'>
<input type=hidden name=words value='@ok_words'>
<input type=hidden name=pangrams value='@pangrams'>
EOH
my @rows;
for my $w (@ok_words) {
    my $uw = ucfirst $w;
    my ($word_td, $clue_td, $cycle_td);
    my $clue;
    if (exists $prior_clues_for{$w}) {
        if (ref $prior_clues_for{$w}) {
            # there is more than one prior clue
            $clue = $prior_clues_for{$w}->[0];
            $cycle_td = td(qq!<img class=cursor onclick='cycle("$w");' src='/nytbee/cycle.jpg'>!);
        }
        else {
            $clue = $prior_clues_for{$w};
        }
    }
    else {
        $clue = '';
    }
    $word_td = td(qq!<a href="javascript:popup_define('$w',300,500)">$uw</a>!);
    $clue_td = td("<input type=text size=40 name=${w}_clue id=${w}_clue"
             . qq! value="$clue">!);
    push @rows, Tr($word_td, $clue_td, $cycle_td);
}
print table(@rows);
print <<'EOH';
<p>
<button class=submit type=submit>Submit</button>
</body>
</html>
<script>document.form.$ok_words[0]_clue.focus();</script>
EOH

=comment

The usual NYT Spelling Bee puzzle includes
ALL normal qualifying words.   If there are clues for
each word then the maker of the puzzle need not include ALL.
Instead, it becomes a kind of crossword puzzle with clues where
you know that the answer words are composed of the seven letters.
You're not trying to 'find' all words that can be made.

=cut
